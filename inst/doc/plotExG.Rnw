
%
% NOTE -- ONLY EDIT THE .Rnw FILE!!!  The .tex file is
% likely to be overwritten.
%
\documentclass[12pt]{article}

\usepackage{amsmath,pstricks}
\usepackage[authoryear,round]{natbib}
\usepackage{hyperref}


\textwidth=6.2in
\textheight=8.5in
%\parskip=.3cm
\oddsidemargin=.1in
\evensidemargin=.1in
\headheight=-.3in

\newcommand{\scscst}{\scriptscriptstyle}
\newcommand{\scst}{\scriptstyle}


\newcommand{\Rfunction}[1]{{\texttt{#1}}}
\newcommand{\Robject}[1]{{\texttt{#1}}}
\newcommand{\Rpackage}[1]{{\textit{#1}}}
\newcommand{\Rmethod}[1]{{\texttt{#1}}}
\newcommand{\Rfunarg}[1]{{\texttt{#1}}}
\newcommand{\Rclass}[1]{{\textit{#1}}}

\textwidth=6.2in

\bibliographystyle{plainnat} 
 
\begin{document}
%\setkeys{Gin}{width=0.55\textwidth}

\title{Rendering pathways to convey quantitative genomic relationships}
\author{VJ Carey et al}
\maketitle

\section{Introduction}

Given an R graph representing a biological pathway and a
vector of numbers (e.g., estimated
levels of gene expression, or quantile of gene expression
value in a distribution over samples) linked to the nodes of the pathway (e.g., genes),
we wish to display the graph with nodes colored to
convey the relationships among the numbers.

Our primary tool for rendering graphs is \Rpackage{Rgraphviz}.
This package uses AT\&T graphviz to compute layouts, and various
aspects of R graphics to create renderings.

Our primary tools for creating pathway graphs are the
\Rpackage{graph} and \Rpackage{pathRender} packages.

In this vignette and associated code, we aim to simplify the
use of software in these components to allow the intended renderings
to be created in a flexible way.

<<code,echo=FALSE>>=
require(graph)
pwayRendAttrs = function(g, AllBorder="transparent",
    AllFixedsize=FALSE, AllFontsize=22.1, AllShape="rectangle",
    fillcolor="transparent", ...) {
   nn = nodes(g)
   numn = length(nn)
   color = rep(AllBorder, numn)
   names(color)=nn
   fixedsize = rep(AllFixedsize, numn)
   names(fixedsize) = nn
   if (length(fillcolor)==1) {
	fillcolvec = rep(fillcolor, numn)
   	names(fillcolvec) = nn
   }
   else if (!identical(names(fillcolor), nodes(g))) 
  	stop("names on vector fillcolor must match nodes(g) exactly")
   else fillcolvec = fillcolor
   shape = rep(AllShape, numn)
   names(shape) = nn
   fontsize = rep(AllFontsize, numn)
   names(fontsize) = nn
   list(color=color, fixedsize=fixedsize, fillcolor=fillcolvec, shape=shape,
      fontsize=fontsize )
}

aggFeatures = function( fvec, splitvar, aggfun ) {
  if (!is.vector(fvec)) stop("fvec must satisfy is.vector()")
  if (!(length(fvec) == length(splitvar))) stop("fvec and splitvar must have equal lengths")
  sapply(split(fvec, splitvar), aggfun)
}

revAnnoEnv = function(env) {
  li = as.list(env)
  na = names(li)
  lens = sapply(li,length)
  rna = rep(na,lens)
  newbas = as.character(unlist(li))
  split(rna, newbas)
}

featNamesFromAnno = function( annovec, ann2featMap ) {
  if (is(ann2featMap, "AtomicAnnDbBimap")) anslist =  mget( annovec, ann2featMap, ifnotfound=NA ) 
  else if (is(ann2featMap, "list")) 
           anslist = ann2featMap[ match(annovec, names(ann2featMap)) ]
  lens = sapply(anslist,length)
  nn = rep(names(anslist), lens)
  ans = unlist(anslist)
  names(ans) = nn
  ans
}

reduceES = function( es, annovec, ann2featMap, pdvname="symbol", collapseFun=NULL ) {
#
# es is an ExpressionSet with featureNames f, say, and
# annovec is a collection of annotations a.  ann2featMap
# is either an AtomicAnnDbBimap with keys in a and range in f, or
# a list with element names in a and element values in f
#
# a new ExpressionSet is computed with features restricted to those
# mapped from annovec
#
  n1 = na.omit(featNamesFromAnno( annovec, ann2featMap ))
  es2 = es[ n1, ]
  newdf = data.frame(names(n1))
  names(newdf) = pdvname
  rownames(newdf) = n1
  featureData(es2) = new("AnnotatedDataFrame", newdf)
  if (!is.null(collapseFun)) {
     splv = as.character(newdf[,1])
     s1 = aggFeatures( exprs(es2)[,1], splv, collapseFun )
     ans = apply( exprs(es2), 2, aggFeatures, splv, collapseFun )
     rownames(ans) = names(s1)
     newdf = data.frame(names(s1))
     names(newdf) = pdvname
     rownames(newdf) = names(s1)
     es2 = new("ExpressionSet", exprs=ans, phenoData=phenoData(es))
     featureData(es2) = new("AnnotatedDataFrame", newdf)
  }
  es2
}
  
#if (!("package:ALL" %in% search())) library(ALL)
#if (!exists("ALL")) data(ALL)
#if (!("package:graph" %in% search())) library(graph)
#data(MAPKsig)
#library(hgu95av2.db)
#X = reduceES( ALL, nodes(MAPKsig), revmap(hgu95av2SYMBOL) )
 

setClass("coloredGraph", contains="graphNEL")

setGeneric("colorNodes", function(g, nodeAss, pal, attgen) standardGeneric("colorNodes"))
setMethod("colorNodes", c("graphNEL", "numeric", "character", "function"), function(g, nodeAss, pal, attgen) {
  nn = nodes(g)
  an = names(nodeAss)
  if (!all(an %in% nn)) stop("nodeAss must have names a subset of nodes(g)")
  ncol = length(pal)
  bounds = seq(min(nodeAss)-.01, max(nodeAss)+.01, length=ncol+1)
  asscut = cut( nodeAss, breaks = bounds )
  colcodes = as.numeric(asscut)
  names(colcodes) = names(nodeAss)
  fullco = rep(0, length(nodes(g)))
  names(fullco) = nodes(g)
  fullco[ names(colcodes) ] = as.numeric(colcodes)
  natt = attgen(g, fillcolor=fullco)
  g = new("coloredGraph", nodes=nodes(g), edgeL=edgeL(g), edgemode=edgemode(g))
  g@graphData$nodeRendAttr = natt
  g@graphData$pal = pal
  g
})

setMethod("plot", "coloredGraph", function(x, y,  ...) {
  oldp = palette(x@graphData$pal)
  plot(as(x, "graphNEL"), nodeAttrs = x@graphData$nodeRendAttr )
  palette(oldp)
})

quantizeByRow = function(es, stratFun = function(x) cut(x, quantile(x, c(0,.25,.5,.75,1)) )){
 fn = featureNames(es) # lost by apply
 exprs(es) = t(apply(exprs(es), 1, function(x) as.numeric(stratFun(x))))
 featureNames(es) = fn
 es
}
 
require(RColorBrewer)
plotExGraph = function(g, es, sampind = 1, pal=colorRampPalette(brewer.pal(9,"Blues"))(length(nodes(g))),
   attgen=pwayRendAttrs) {
 h = colorNodes(g, exprs(es)[,sampind], pal, attgen)
 plot(h)
}

@

\section{An example}

\subsection{A pathway graph}

The \Rpackage{graph} package contains a custom-made graph representing
the MAPK signaling pathway.  First we render it in isolation from data:
<<lkmapk,fig=TRUE>>=
library(Rgraphviz)
data(MAPKsig)
plot(MAPKsig, nodeAttrs=pwayRendAttrs(MAPKsig))
@

Note that the  default rendering of the pathway graph is hard to read; we
use the new \Rfunction{pwayRendAttrs} function to generate attributes that improve readability.

\subsection{An ExpressionSet and its reduction}

We will work with ALL.
<<doall>>=
library(ALL)
if (!exists("ALL")) data(ALL)
@

A basic problem is to reduce the information obtained using the whole-genome microarray to
a set of numbers relevant to the pathway we wish to render.  The \Rfunction{reduceES} function
helps with this.  Given a vector of annotation tokens (e.g., HUGO gene symbols) and
a map from symbols to associated microarray probes, \Rfunction{reduceES} restricts the
assay data to relevant probes.  The map parameter can be either an AtomicAnnDbBimap as
created in the *.db annotation packages, or a list with annotation tokens as element names
and vectors probe identifiers as elements.  Here we illustrate the use of the Bimap:

<<doredu>>=
if ("package:hgu95av2" %in% search()) detach("package:hgu95av2")
library(hgu95av2.db)
red1 = reduceES( ALL, nodes(MAPKsig), revmap(hgu95av2SYMBOL), "symbol" )
red1
pData(featureData(red1))
@

Note that the reduceES creates a featureData variable and that there are repetitions
of values of this variable.  We can specify that we want to collapse repetitions
by specifying a function for the collapseFun parameter.  We will use mean.

<<dored2>>=
collap1 = reduceES( ALL, nodes(MAPKsig), revmap(hgu95av2SYMBOL), "symbol", mean )
collap1
@

\subsection{A rendering}

Now we will render information on one sample from the reduced data.
<<dothp, fig=TRUE>>=
plotExGraph(MAPKsig, collap1, 1)
@

\end{document}
